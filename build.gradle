import com.amazonaws.auth.profile.ProfileCredentialsProvider

buildscript {
    ext.kotlin_version = '1.3.72'
    ext.jacoco_version = "0.8.5"
    ext.dokka_version = '0.10.1'
    ext.bintray_version = '1.8.5'
    ext.enableJacoco = { Project project, String variant ->
        project.plugins.apply('jacoco')
        final capVariant = variant.capitalize()
        StringBuilder folderSb = new StringBuilder(variant.length() + 1)
        for (int i = 0; i < variant.length(); i++) {
            char c = variant.charAt(i)
            if (Character.isUpperCase(c)) {
                folderSb.append('/')
                folderSb.append(Character.toLowerCase(c))
            } else {
                folderSb.append(c)
            }
        }
        final folder = folderSb.toString()
        if (project.hasProperty("android")) {
            project.android.testOptions {
                unitTests.all {
                    jacoco {
                        includeNoLocationClasses = true
                    }
                }
            }
        }
        project.jacoco {
            toolVersion = jacoco_version
        }
        project.tasks.create(
                name: 'jacocoTestReporting',
                type: JacocoReport,
                dependsOn: "test${capVariant}UnitTest"
        ) {
            def buildDir = project.buildDir
            def coverageSourceDirs = [
                    "src/main/java",
                    "src/main/kotlin"
            ]
            def fileFilter = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*'
            ]
            def javaClasses = fileTree(
                    dir: "$buildDir/intermediates/classes/$folder",
                    excludes: fileFilter
            ) + fileTree(
                    dir: "$buildDir/intermediates/javac/$variant/classes",
                    excludes: fileFilter
            )
            def kotlinClasses = fileTree(
                    dir: "$buildDir/tmp/kotlin-classes/$variant",
                    excludes: fileFilter
            )
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${project.name} with the $variant variant."
            getClassDirectories().setFrom(files([javaClasses], [kotlinClasses]))
            getAdditionalSourceDirs().setFrom(coverageSourceDirs)
            getSourceDirectories().setFrom(files(coverageSourceDirs))
            getExecutionData().setFrom(project.fileTree(buildDir).include("/jacoco/*.exec"))
            reports {
                xml.enabled = true
                html.enabled = true
            }
        }
    }
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath("com.github.dcendents:android-maven-gradle-plugin:2.1")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jacoco:org.jacoco.core:${jacoco_version}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "com.amazonaws:aws-java-sdk-core:1.11.786"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
    }
    ext {
        versions = [:]
        plugins = [:]
        deps = [:]

        versions.kotlin = kotlin_version
        versions.androidx_appcompat = '1.2.0-alpha01'
        versions.androidx_ktx = '1.1.0'
        versions.androidx_recyclerview = '1.1.0'
        versions.junit = '4.12'
        versions.museum = 'ff66b5200c'
        versions.toml4j = '0.5.1'
        versions.gson = '2.8.2'
        versions.okhttp = '3.12.6'
        versions.oksse = '4121e87e8c'
        versions.i2p_crypto_eddsa = '0.3.0'
        versions.slf4j = '1.7.25'
        versions.kotlinmockito = '2.1.0'
        versions.grpcProtobuf = '1.18.0'
        versions.googleCommonProtos = '1.14.0'
        versions.multidex = '2.0.0'
        versions.grpcNetty_tcnative_boringssl = '2.0.20.Final'
        versions.grpc_validate = "0.2.0"

        deps.multi_dex = "androidx.multidex:multidex:$versions.multidex"
        deps.kotlin_stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
        deps.kotlin_junit = "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        deps.appcompat = "androidx.appcompat:appcompat:$versions.androidx_appcompat"
        deps.ktx = "androidx.core:core-ktx:$versions.androidx_ktx"
        deps.recyclerview = "androidx.recyclerview:recyclerview:${versions.androidx_recyclerview}"

        deps.kotlinMockito = "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.kotlinmockito"
        deps.junit = "junit:junit:$versions.junit"
        deps.museum_annotations = "com.github.mproberts.museum:annotations:${versions.museum}"
        deps.museum_showcase = "com.github.mproberts.museum:showcase:${versions.museum}@aar"

        deps.gson = "com.google.code.gson:gson:${versions.gson}"
        deps.okhttp = "com.squareup.okhttp3:okhttp:${versions.okhttp}"
        deps.okhttp_mockwebserver = "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"
        deps.oksse = "com.github.kinecosystem:oksse:${versions.oksse}"
        deps.i2p_crypto_eddsa = "net.i2p.crypto:eddsa:${versions.i2p_crypto_eddsa}"

        deps.slf4j_android = "org.slf4j:slf4j-android:$versions.slf4j"
        deps.slf4j = "org.slf4j:slf4j-api:$versions.slf4j"

        deps.grpc_common_protos = "com.google.api.grpc:proto-google-common-protos:${versions.googleCommonProtos}"
        deps.grpc_okhttp = "io.grpc:grpc-okhttp:${versions.grpcProtobuf}"
        deps.grpc_netty_shaded = "io.grpc:grpc-netty:${versions.grpcProtobuf}"
        deps.grpc_netty_tcnative_boringssl_static = "io.netty:netty-tcnative-boringssl-static:${versions.grpcNetty_tcnative_boringssl}"
        deps.grpc_stub = "io.grpc:grpc-stub:${versions.grpcProtobuf}"
        deps.grpc_protobuf = "io.grpc:grpc-protobuf:${versions.grpcProtobuf}"
        deps.grpc_android = "io.grpc:grpc-android:${versions.grpcProtobuf}"
        deps.grpc_validate = "io.envoyproxy.protoc-gen-validate:pgv-java-stub:${versions.grpc_validate}"
        deps.grpc_testing = "io.grpc:grpc-testing:${versions.grpcProtobuf}"

        pomConfig = {
            licenses {
                license {
                    name "The MIT License"
                    url "https://github.com/kinecosystem/kin-android/LICENSE.md"
                    distribution "repo"
                }
            }
            developers {
                developer {
                    name "Kin Ecosystem"
                    email "android@kin.org"
                }
            }

            scm {
                url "https://github.com/kinecosystem/kin-android"
            }
        }

        bintrayUser = findProperty("bintray.user") ?: System.getProperty("bintray.user")
        bintrayKey = findProperty("bintray.key") ?: System.getProperty("bintray.key")
        buildNumber = findProperty("build.number") ?:  System.getProperty("build.number")
    }
}

plugins {
    id "org.jetbrains.dokka" version "0.10.1"
}

dokka {
    outputFormat = 'gfm'
    outputDirectory = "$rootDir/docs"

    subProjects = ["base", "base-compat"]

    configuration {
        moduleName = ""
        includeNonPublic = false

        perPackageOption {
            prefix = "org.kin.sdk"

            skipDeprecated = false
            reportUndocumented = true // Emit warnings about not documented members
            includeNonPublic = false
        }

        perPackageOption {
            prefix = "org.kin.stellarfork" // will match kotlin.internal and all sub-packages of it
            suppress = true
        }
    }
}

def jitpackAuthToken = findProperty("jitpackAuthToken") ?: System.getenv("JITPACK_AUTH_TOKEN")

allprojects {
    ext {
        // Libraries
        groupId = "org.kin.sdk.android"
        libraryVersion = "0.1.7"
        siteUrl = "https://github.com/kinecosystem/kin-android"
        gitUrl = "https://github.com/kinecosystem/kin-android.git"
    }

    version = libraryVersion
    group = groupId

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            url "https://jitpack.io"
            credentials { username jitpackAuthToken }
        }
    }

    tasks.withType(Test) {
        systemProperty "java.library.path", "${System.getProperty("java.library.path")}:$rootDir/jniLibs/macOS:$rootDir/jniLibs/linux"
    }
}

task copyNativeLibsForLinux() {
    doLast {
        println "sudo cp jniLibs/linux/libsodium.so /usr/lib".execute()
        println "sudo cp jniLibs/linux/libsodiumjni.so /usr/lib".execute()
    }
}

task copyNativeLibsForMacOS() {
    doLast {
        println "cp jniLibs/macOS/libsodium.dylib /usr/local/lib".execute()
        println "cp jniLibs/macOS/libsodium.a /usr/local/lib".execute()
        println "cp jniLibs/macOS/libsodium.la /usr/local/lib".execute()
        println "cp jniLibs/macOS/libsodium.jnilib /usr/local/lib".execute()
        println "cp jniLibs/macOS/pkgconfig/libsodium.pc /usr/local/lib/pkgconfig/libsodium.pc".execute()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

class JacocoFullReportExtension {

    public List<String> excludeProjects = new ArrayList<>()

    /**
     * Adds the given projects to the list of projects that should not be included in the coverage report.
     */
    def excludeProject(String... projects) {
        excludeProjects.addAll(projects)
    }
}

/**
 * Adds a 'jacocoFullReport' task to the current project that produces a Jacoco report for code coverage of the tests
 * of all subprojects of the current project. This report can be useful when different subprojects test different parts
 * of a project -- as is often a case when integration tests are factored out into separate subprojects.
 */
class JacocoFullReportPlugin implements Plugin<Project> {

    static def getReportTasks(Project project, JacocoReport exclude) {
        // Find list of projects whose Jacoco report tasks are to be considered.
        def extension = project.extensions.findByType(JacocoFullReportExtension)
        def projects = project.allprojects
        projects.removeAll {
            extension.excludeProjects.contains(it.path)
        }

        // Find all JacocoReport tasks except for the jacocoFullReport task we're creating here.
        def reportTasks = projects.collect {
            it.tasks.withType(JacocoReport).findAll { it != exclude }
        }.flatten()

        reportTasks
    }

    @Override
    public void apply(Project project) {
        project.plugins.apply(JacocoPlugin)
        project.getExtensions().create("jacocoFull", JacocoFullReportExtension)
        JacocoReport fullReportTask = project.tasks.create("jacocoFullReport", JacocoReport)
        fullReportTask.configure {
            setGroup("reporting")
            project.subprojects.findAll { it.tasks.withType(JacocoBase).size() > 0 }.each {
                dependsOn("${it.name}:jacocoTestReporting")
            }

            reports.xml.enabled = true
            reports.html.enabled = true

            // Implement fix mentioned in Gradle Source: https://github.com/gradle/gradle/blob/master/subprojects/jacoco/src/main/groovy/org/gradle/testing/jacoco/tasks/JacocoReport.groovy
            doFirst {
                project.logger.info("Setting up jacocoFullReport for: " + getReportTasks(project, fullReportTask))
            }
            setOnlyIf {
                getExecutionData().setFrom(project.fileTree(project.rootDir.absolutePath).include("**/jacoco/*.exec"))
                project.logger.info("setOnlyIf ${executionData.files}")
                executionData.files.any { it.exists() }
            }


            // Filter for nulls since some JacocoReport tasks may have no classDirectories or sourceDirectories
            // configured, for example if there are no tests for a subproject.
            getExecutionData()
                    .setFrom(project.files { getReportTasks(project, fullReportTask).executionData })
            getClassDirectories().setFrom(project.files({
                getReportTasks(project, fullReportTask)
                        .collect { it.classDirectories }
                        .findAll { it != null }
            }))
            getSourceDirectories().setFrom(project.files({
                getReportTasks(project, fullReportTask)
                        .collect { it.sourceDirectories }
                        .findAll { it != null }
            }))
        }
    }
}

apply plugin: JacocoFullReportPlugin
