buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
    }
}

apply plugin: "java-library"
apply plugin: "com.google.protobuf"
apply plugin: "maven-publish"
apply plugin: "signing"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation deps.grpc_protobuf
    implementation deps.grpc_stub
}

def generatedSrcRoot = file("${buildDir}/generated/source/proto/main/java/")
sourceSets.main {
    proto {
        srcDir "${rootDir}/base-storage/proto/"
    }
    java {
        srcDirs = ["${generatedSrcRoot}"]
    }
}

compileJava {
    options.annotationProcessorGeneratedSourcesDirectory generatedSrcRoot
}

def protocVersion = "3.12.0"
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${versions.grpcProtobuf}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
        all()*.plugins {
            grpc {
                option 'lite'
            }
        }
    }
}

jar {
    baseName = 'base-storage'
    manifest {
        attributes('kin-storage': project.name,
                'Version': project.version)
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        release(MavenPublication) {
            artifact sourcesJar
            artifact jar
            artifact javadocJar

            pom {
                packaging 'jar'

                name = "base-storage"
                description = "A Protobuf based storage system for the Kin Android SDK"
                url = 'https://github.com/kinecosystem/kin-android/tree/master/base-storage'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/kinecosystem/kin-android/blob/master/LICENSE.md'
                    }
                }

                scm {
                    connection = 'scm:git:github.com/kinecosystem/kin-android.git'
                    developerConnection = 'scm:git:ssh://github.com/kinecosystem/kin-android.git'
                    url = 'https://github.com/kinecosystem/kin-android/tree/master/base-storage'
                }

                developers {
                    developer {
                        id = 'kin-ci'
                        name = 'Kin CI'
                        email = 'eng+ci@kin.org'
                    }
                }

                withXml {
                    def root = asNode()
                    root.children().last() //+ pomConfig
                    def depsNode = root["dependencies"][0] ?: root.appendNode("dependencies")
                    def addDep = {
                        if (it.group == null) return // Avoid empty dependency nodes

                        def dependencyNode = depsNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        if (it.hasProperty('optional') && it.optional) {
                            dependencyNode.appendNode('optional', 'true')
                        }
                        dependencyNode.appendNode("scope", "runtime")
                    }

                    configurations.implementation.dependencies.each addDep
                }
            }
        }
    }
}

ext["signing.keyId"] = rootProject.ext["signing.keyId"]
ext["signing.password"] = rootProject.ext["signing.password"]
ext["signing.secretKeyRingFile"] = rootProject.ext["signing.secretKeyRingFile"]

signing {
    sign publishing.publications
}
